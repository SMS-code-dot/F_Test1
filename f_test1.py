# -*- coding: utf-8 -*-
"""F_Test1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFAIsNcyJEQnkOgE3eecLnxqq_CT2Oml

### # Install the neededful
"""

pip install pandas numpy matplotlib seaborn prophet openpyxl

"""###"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from prophet import Prophet
from sklearn.metrics import mean_squared_error, r2_score

"""## 1. Load the updated dataset

"""

df = pd.read_excel('/content/Liberian_rice_price_prediction.xlsx')
df.head()

"""# 2. Preprocessing
## Convert date

"""

df['Date'] = pd.to_datetime(df['Date'],dayfirst=True, errors='coerce')
df = df.dropna(subset=['Date', 'Price'])
df = df.sort_values('Date')

"""# 3. Group by month and average prices

"""

df['MonthPeriod'] = df['Date'].dt.to_period('M')
monthly_avg = df.groupby('MonthPeriod')['Price'].mean().reset_index()
monthly_avg['Date'] = monthly_avg['MonthPeriod'].dt.to_timestamp()

"""# 4. Prepare data"""

prophet_df = monthly_avg.rename(columns={
    'Date': 'ds',
    'Price': 'y'
})

"""## 5. Define special events/holidays (extended realistic events)"""

special_events = pd.DataFrame({
    'holiday': [
        'covid_lockdown', 'food_subsidy_intro', 'election_period',
        'fuel_price_spike', 'import_disruption', 'harvest_season_start',
        'currency_change', 'external_aid_injection'
    ],
    'ds': pd.to_datetime([
        '2020-04-01', '2021-06-01', '2023-10-01',
        '2019-07-01', '2022-08-01', '2021-09-01',
        '2022-05-01', '2023-01-01'
    ]),
    'lower_window': 0,
    'upper_window': 2
})

"""## 6. Build and fit Prophet model with ultra fine-tuned settings"""

model = Prophet(
    yearly_seasonality=True,
    weekly_seasonality=False,
    daily_seasonality=False,
    changepoint_prior_scale=0.008,
    n_changepoints=100,
    changepoint_range=0.95,
    seasonality_mode='multiplicative',
    interval_width=0.99,
    holidays=special_events
)
model.add_seasonality(name='monthly', period=30.5, fourier_order=5)
model.add_seasonality(name='quarterly', period=90, fourier_order=7)
model.add_seasonality(name='semiannual', period=180, fourier_order=10)
model.add_seasonality(name='triannual', period=120, fourier_order=12)
model.fit(prophet_df)

"""## 7. Create future dataframe"""

future = model.make_future_dataframe(periods=12, freq='M')

"""## 8. Forecast"""

forecast = model.predict(future)

"""## 9. Evaluation"""

actual = prophet_df.set_index('ds').copy()
predicted = forecast.set_index('ds').loc[actual.index]['yhat']

r2 = r2_score(actual['y'], predicted)
rmse = np.sqrt(mean_squared_error(actual['y'], predicted))
print(f'R2 Score: {r2:.4f}')
print(f'RMSE: {rmse:.2f}')

"""# 10. Plot forecast"""

model.plot(forecast)
plt.title("Rice Price Forecast (Ultra Tuned Prophet Model)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.tight_layout()
plt.show()

"""## 11. Plot components"""

model.plot_components(forecast)
plt.tight_layout()
plt.show()

"""## 12. Plot actual vs predicted"""

plt.figure(figsize=(12, 6))
plt.plot(actual.index, actual['y'], label='Actual Price', color='blue')
plt.plot(actual.index, predicted, label='Predicted Price', color='orange')
plt.title('Actual vs Predicted Rice Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.tight_layout()
plt.show()

